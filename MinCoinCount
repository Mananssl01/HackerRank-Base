// given an array of denomination type and infinite number of coins of all type available, find out the minimum number of coins required to make a given value
// for example - if value =4 and coin array is {1,2,3}, minimum coins required are = 2 {either (2,2) or (1,3)}
// for example - if value =4 and coin array is {1,2,3,4},only 1 coin is required.

package com.test.dp;


public class MinCoinCount {
    public static void main(String[] args) {
       int [] input={1,2,3,5}; int n=0;
       System.out.println(new MinCoinCount().getCombinationCount(n,null));
    }

    public int getCombinationCount(int n,int [] input)
    {
        if(input==null||input.length==0)
            throw  new IllegalArgumentException("Invalid input");

        int [] [] table = new int[input.length+1][n+1];
        for (int i = 0; i <=input.length ; i++)
            for (int j = 0; j <=n ; j++) {
                if(i==0)
                    table[i][j]=Integer.MAX_VALUE;
                else if(j==0)
                    table[i][j]=0;
                else if(input[i-1]<=j)
                    {
                        table[i][j]=min(table[i-1][j],1+table[i][j-input[i-1]]);
                    }
                    else
                    table[i][j]=table[i-1][j];
            }
            return table[input.length][n];

    }

    private int min(int a, int b)
    {
        return a<b?a:b;
    }
}
